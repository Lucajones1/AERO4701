% Script for Designing the Magnetorquers
clear;
clc;

close all;

GraphSetup(14);

%% Defining Satellite Design Parameters
% Importing the Satellite's Design Parameters
sat = satgeom();
% Pulling out the Inertias
Ix_max = sat.geom.Ix_max;
Iy_max = sat.geom.Iy_max;
Iz_max = sat.geom.Iz_max;
% Finding the Maximum Moment of Inertia as this will yield the largest 
% torque required
I_max = max([Ix_max,Iy_max,Iz_max]);

% System Requirements
% Rotation Rate 
omega_req = 50; %[deg/s]
% Timeframe for Rotation
t_rot = 2; %[days]
% Converting units to SI
omega_req = omega_req*pi/180; %[rad/s]
t_rot = t_rot*86400; %[sec]
% Saving Requirements to the sat data structure
sat.reqs.ADCSreqrotrate = omega_req;
sat.reqs.ADCStimeforrot = t_rot;

% Structural Constraints
% xy plane
xy_dimlim = 0.75; %[m]
% z plane
z_dimlim = 0.8; %[m]

%% External Environment Considerations
% Importing the Boundary Conditions
BCs = magBCs(sat);
% Sorting the BCs
BfieldBCs = BCs(1,:);
solradBCs = BCs(2,:);
gBCs = BCs(3,:);
FdragBCs = BCs(4,:);

% Earth's Average Magnetic Field
B_e = 50e-6; %[T]
% Speed of Light
c = 2.99792e8; %[m/s]
% Permeability of Free Space
mu_0 = 1.2566e-6; %[N/A^2]
% Density of Copper
density_Cu = 8.96; %[g/cm^3]
density_Cu = density_Cu*100^3; %[g/m^3]

% Defining the Torque required from the Magnetorquer
tau_req = magnetorquers(sat);

%% Calculating the additional overhead in Magnetic Moment required
% Effect of Solar Radiation - Assume the Maximum Torque generation which
% occurs when the Force from the Solar Radiation acts on half of the
% CubeSat
% Maximum Solar Radiation pressure
p_sol = 2*solradBCs(2)/c;
% Maximum Force generated by Solar Radiation Pressure incident on half of 
% the Maximum Area
Fsol = p_sol*1/2*sat.geom.Amax; %[N]
% Converting the Force to a Torque on the satellite. The Force vector acts
% through the centrepoint of half of the Maximum Area
l_torque = sqrt(sat.geom.x_sat^2+sat.geom.y_sat^2)/4; %[m]
tau_sol = Fsol*l_torque; %[Nm]
% Adding the Torque generated by the Solar Radiation to the Torque
% required by the Magnetorquer
tau_req = tau_req+tau_sol; %[Nm]

% Effect of Atmospheric Drag - Assume the Maximum Torque generation which
% occurs when the Force from the Atmospheric Drag acts on half of the
% CubeSat
tau_drag = FdragBCs(2)*l_torque; %[Nm]
% Adding the Torque generated by the Atmospheric Drag to the Torque 
% required by the Magnetorquer
tau_req = tau_req+tau_drag; %[Nm]

% Effect of Gravity - Maximum CoM Displacement of 2cm
maxpos_com = 20/1000; %[m]
% Adding the distance the CoM has moved to the required torque
tau_old = tau_req;
tau_gravity = (tau_req/l_torque)*(l_torque+maxpos_com)-tau_old;

% Effect of Earth's Magnetic Field - Assume the Magnetic Field is at its
% weakest to get a worst case scenario for the Magnetic Moment generated by
% the Magnetorquer
m_req = tau_req/BfieldBCs(1); %[Am^2]

%% Designing the Magnetorquers
% Using the Magnetic Moment equation, m = nIA, several key design
% parameters can be defined

% Maximum Power avaliable to the Magnetorquers
Pmax = 1.2; %[W]
Pmax = 0.75; %[W]
% Dividing by 3 to get the Power avaliable to 1 Magnetorquer
Pmax = Pmax/3; %[W]
% Output Voltage from OBC Pin
Vin = 5; %[V]
% Maximum Current Provided to Magnetorquers
Current = 0.015;%Pmax/Vin; %[A]

% 3D Printing Parameters
% Tube Wall Thickness
t_wall = 2; %[mm]
t_wall = t_wall/1000; %[m]

% Wire Gauge Selection
% Option 1 - Copper Wire, 0.1mm diameter (38 AWG)
% https://core-electronics.com.au/enameled-copper-magnet-wire-11-meters-0-1mm-diameter.html
% Wire Diameter
dia_w = 0.1; %[mm]
dia_w = dia_w/1000; %[m]
% Copper wire Resistivity
rho_Cu = 1.712e-8; %[Ωm]
% Wire Resistance per metre
Rw_m = rho_Cu/(pi*dia_w^2/4); %[Ω/m]

%% Magnetorquer Structure Design for x and y planes
% The Structure for the Magnetorquer will consist of the 3D printed hollow
% cylindrical tube in which the Cooper Wire will be wound over
% Outer Diameter of Cylindrical Tube
OD_tube_xy = 20; %[mm]
OD_tube_xy = OD_tube_xy/1000; %[m]
% Inner Diameter of Cylindrical Tube
ID_tube_xy = OD_tube_xy-2*t_wall;
% Area of Tube (Outer Diameter)
A_tube_xy = pi*OD_tube_xy^2/4; %[m^2]
% Relative Permeability of Tube Core - Air
mu_r = 1; %[N/A^2]
% Permeability of Tube Core
mu_core = mu_r*mu_0; %[N/A^2]

% Calculating the Number of Turns of Wire required
n_xy = m_req/(Current*A_tube_xy); %[Am^2]
% Calculating the Resistance
R_w_xy = Rw_m*n_xy*(pi*OD_tube_xy); %[Ω]
% Calculating the Length of the Magnetorquer assuming a space inefficiency
eta_space = 1.20; % Space Inefficiency Factor
l_magnetorquer_xy = n_xy*dia_w*eta_space*1000; %[mm]

%% Magnetorquer Structure Design for z planes
% The Structure for the Magnetorquer will consist of the 3D printed hollow
% cylindrical tube in which the Cooper Wire will be wound over
% Outer Diameter of Square
OD_tube_z = 60; %[mm]
OD_tube_z = OD_tube_z/1000; %[m]
% Area of Tube (Outer Diameter)
A_tube_z = pi*OD_tube_z^2/4; %[m^2]

% Calculating the Number of Turns of Wire required
n_z = m_req/(Current*A_tube_z); %[Am^2]
% Calculating the Resistance
R_w1_z = Rw_m*n_z*(pi*OD_tube_z); %[Ω]
% Calculating the Length of the Magnetorquer assuming the same space 
% inefficiency
l_magnetorquer_z = n_z*dia_w*eta_space*1000; %[mm]

%% Designing the Magnetorquer off the Maximum Dimensions
% XY Magnetorquer Maximum Length
l_magnetorquer_max_xy = 60; %[mm]
% Using the Tube Dimensions from above, the Number of Turns can be
% calculated
n_lmax_xy = floor(l_magnetorquer_max_xy/(1000*dia_w*eta_space));
% Determining the Actual Length and Number of Turns for the Magnetorquer
if l_magnetorquer_xy > l_magnetorquer_max_xy
    % Setting the Magnetorquer Length to be equal to the max value
    l_magnetorquer_xy = l_magnetorquer_max_xy;
    % Setting the Magnetorquer Number of Turns to be equal to the max value
    n_xy = n_lmax_xy;
end
% Number of Layers
n_layers_xy = 1;
% Magnetic Moment generated for maximum sized Magnetorquers
m_lmax_xy = n_lmax_xy*n_layers_xy*Current*A_tube_xy; %[Am^2]


% Z Magnetorquer Maximum Length - Remove 2*3.5mm off from the total height
l_magnetorquer_max_z = 13; %[mm]
% Number of Turns of one layer
n_lmax_z = floor(l_magnetorquer_max_z/(1000*dia_w*eta_space));
% Determining the Actual Length and Number of Turns for the Magnetorquer
if l_magnetorquer_z > l_magnetorquer_max_z
    % Setting the Magnetorquer Length to be equal to the max value
    l_magnetorquer_z = l_magnetorquer_max_z;
    % Setting the Magnetorquer Number of Turns to be equal to the max value
    n_z = n_lmax_z;
end
% Number of Layers
n_layers_z = 1;
% Inner Diameter of Cylindrical Tube
ID_tube_z = OD_tube_z-(2*t_wall+2*n_layers_z*dia_w);
% Magnetic Moment generated for maximum sized Magnetorquers
m_lmax_z = n_lmax_z*n_layers_z*Current*A_tube_z; %[Am^2]


% Time taken to recover from Off-Nominal Tumbling
% Rotation Rate for Off-Nominal Tumbling
omega_offn = 90; %[deg/s]
omega_offn = omega_offn*pi/180; %[rad/s]
% Time taken to return to 0rad/s
t_offn = omega_offn/(m_req*B_e/I_max*86400);

% Checking if current Magnetorquers are sufficient
if m_lmax_xy >= m_req
    fprintf('XY designs are sufficient with %.4e Am^2 spare\n',m_lmax_xy-m_req);
else
    fprintf('XY designs are not sufficient; increase mu by %.4f Am^2\n',m_req-m_lmax_xy);
end
if m_lmax_z >= m_req
    fprintf('Z design is sufficient with %.4e Am^2 spare\n',m_lmax_z-m_req);
else
    fprintf('Z design is not sufficient; increase mu by %.4f Am^2\n',m_req-m_lmax_z);
end

% Calculating the Recovery Rate
t_nom = omega_req/(m_req*BfieldBCs(1)/I_max*86400);
fprintf('Time to recover for maximally sized Magnetorquer: %.4f days\n',t_nom);

%% Simulating the Magnetorquer in FEMM
% Saving the key design parameters into a structure
% XY Magnetorquers
mag.xy.coil.nturns = n_xy;
mag.xy.coil.nlayers = n_layers_xy;
mag.xy.coil.I = Current;
mag.xy.coil.V = Vin;
mag.xy.coil.R = R_w_xy;
mag.xy.coil.dia_w = dia_w;
mag.xy.tube.OD = OD_tube_xy;
mag.xy.tube.ID = ID_tube_xy;
mag.xy.tube.t = t_wall;
mag.xy.tube.r_out = OD_tube_xy/2;
mag.xy.tube.r_in = ID_tube_xy/2;
mag.xy.tube.L = ceil(l_magnetorquer_xy)/1000;
mag.xy.tube.mur = mu_r;

% Z Magnetorquers
mag.z.coil.nturns = n_z;
mag.z.coil.nlayers = n_layers_z;
mag.z.coil.I = Current;
mag.z.coil.V = Vin;
mag.z.coil.R = R_w1_z;
mag.z.coil.dia_w = dia_w;
mag.z.tube.OD = OD_tube_z;
mag.z.tube.ID = ID_tube_z;
mag.z.tube.t = t_wall;
mag.z.tube.r_out = OD_tube_z/2;
mag.z.tube.r_in = ID_tube_z/2;
mag.z.tube.L = ceil(l_magnetorquer_z)/1000;
mag.z.tube.mur = mu_r;

% Running the FEMM simulation function for the x and y magnetorquers
mag.xy = magfemm(mag.xy,'_xyinitial');
mag.z = magfemm(mag.z,'_zinitial');

%% Determining actual Torque Output
% XY Magnetorquers
% Extracting calculated for the xy Magnetorquers
phi_n = mag.xy.femm.phi_n; %[Wb]
L = mag.xy.tube.L; %[m]
% Calculating the Actual Magnetic Moment
m_real_xy = phi_n*L/mu_core;
% Power Requirement
fprintf('Initial xy Magnetorquer Power Consumption [W]: %.4f\n',...
    mag.xy.femm.P);

% Z Magnetorquer
% Extracting calculated for the z Magnetorquer
phi_n = mag.z.femm.phi_n; %[Wb]
L = mag.z.tube.L; %[m]
% Calculating the Actual Magnetic Moment
m_real_z = phi_n*L/mu_core;
% Power Requirement
fprintf('Initial z Magnetorquer Power Consumption [W]: %.4f\n',...
    mag.z.femm.P);

% Redesigning the Magnetorquers to achieve the required Magnetic Moment
% Calculating the factors to increase the Magnetic Moment by
factor_m_xy = m_req/m_real_xy;
factor_m_z = m_req/m_real_z;
% Adding Layers of wire equal to the factor the Magnetic Moment needs to
% increase by
n_layers_xy = ceil(factor_m_xy);
n_layers_z = ceil(factor_m_z);
% Inner Diameter of Cylindrical Tube for the z Magnetorquer
ID_tube_z = OD_tube_z-(2*t_wall+2*n_layers_z*dia_w);
% Changing the Number of Turns to be the Maximum Number of Turns possible
n_xy = n_lmax_xy;
n_z = n_lmax_z;
% Recalculating the Resistance
R_w_xy = Rw_m*n_xy*(pi*OD_tube_xy); %[Ω]
R_w1_z = Rw_m*n_z*(pi*OD_tube_z); %[Ω]
% Overwriting the old parameters in the mag structure with the new
% parameters
mag.xy.coil.nturns = n_xy;
mag.xy.coil.nlayers = n_layers_xy;
mag.xy.coil.R = R_w_xy;
mag.z.coil.nturns = n_z;
mag.z.coil.nlayers = n_layers_z;
mag.z.tube.ID = ID_tube_z;
mag.z.coil.R = R_w1_z;

% Rerunning FEMM 4.2 with the new values
mag.xy = magfemm(mag.xy,'_xyfinal');
mag.z = magfemm(mag.z,'_zfinal');

% Extracting calculated for the xy Magnetorquers
phi_n = mag.xy.femm.phi_n; %[Wb]
L = mag.xy.tube.L; %[m]
% Computing the New Magnetic Moments
m_real_xy = phi_n*L/mu_core;
% Calculating the Torque Generated
tau_xy = m_real_xy*BfieldBCs(1);
% Calculating length of wire used per Magnetorquer
n_xy = mag.xy.coil.nturns;
n_layers_xy = mag.xy.coil.nlayers;
dia_w = mag.xy.coil.dia_w;
OD_tube_xy = mag.xy.tube.OD;
Lw_xy = n_xy*n_layers_xy*pi*OD_tube_xy; %[m]
% Calculating the weight of the wire used
Ww_xy = density_Cu*pi/4*dia_w^2*Lw_xy; %[g]

% Extracting calculated for the z Magnetorquer
phi_n = mag.z.femm.phi_n; %[Wb]
L = mag.z.tube.L; %[m]
% Computing the New Magnetic Moments
m_real_z = phi_n*L/mu_core;
% Power Requirement
fprintf('New z Magnetorquer Power Consumption [W]: %.4f\n',...
    mag.z.femm.P);
% Calculating the Torque Generated
tau_z = m_real_z*BfieldBCs(1);
% Calculating length of wire used per Magnetorquer
n_z = mag.z.coil.nturns;
n_layers_z = mag.z.coil.nlayers;
dia_w = mag.z.coil.dia_w;
OD_tube_z = mag.z.tube.OD;
Lw_z = n_z*n_layers_z*pi*OD_tube_z; %[m]
% Calculating the weight of the wire used
Ww_z = density_Cu*pi/4*dia_w^2*Lw_z; %[g]

%% Printing the Results out
% XY Magnetorquers
fprintf('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n');
fprintf('XY Magnetorquers\n')
% Power Requirement
fprintf('Power Consumption [W]: %.4f\n',...
    mag.xy.femm.P);
% Current Requirement
fprintf('Current Required [A]: %.4f\n',...
    mag.xy.femm.I);
% Voltage Requirement
fprintf('Voltage Drop [VDC]: %.4f\n',...
    mag.xy.femm.V);
% Number of Turns
fprintf('Number of Turns: %.4f\n',...
    mag.xy.coil.nturns*mag.xy.coil.nlayers);
% Torque Generated
fprintf('Torque Generated: %.3E\n',...
    tau_xy);
% Weight of Copper
fprintf('Wire Weight [g]: %.4f\n',...
    Ww_xy);
% Length of Wire used
fprintf('Length of Wire used [m]: %.4f\n',...
    Lw_xy);
fprintf('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n');

% Z Magnetorquer
fprintf('Z Magnetorquer\n')
% Power Requirement
fprintf('Power Consumption [W]: %.4f\n',...
    mag.z.femm.P);
% Current Requirement
fprintf('Current Required [A]: %.4f\n',...
    mag.z.femm.I);
% Voltage Requirement
fprintf('Voltage Drop [VDC]: %.4f\n',...
    mag.z.femm.V);
% Number of Turns
fprintf('Number of Turns: %.4f\n',...
    mag.z.coil.nturns*mag.z.coil.nlayers);
% Torque Generated
fprintf('Torque Generated: %.3E\n',...
    tau_z);
% Weight of Copper
fprintf('Wire Weight [g]: %.4f\n',...
    Ww_z);
% Length of Wire used
fprintf('Length of Wire used [m]: %.4f\n',...
    Lw_z);
fprintf('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n');

% Saving the Workspace
save('data.mat');